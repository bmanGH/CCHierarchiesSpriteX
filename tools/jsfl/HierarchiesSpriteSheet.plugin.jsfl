/*
 * Hierarchies Sprite Sheet Plug-in
 *
 * author: bman <zx123xz321hm3@hotmail.com>
 *
 * version 0.1   9/28/2013
 * version 0.2   10/20/2013   fix bitmap export
 * version 2.0   10/24/2014   version 2.0
 */

var FORMAT_VERSION = "2.0";

function getPluginInfo(lang)
{
	pluginInfo = new Object();
	pluginInfo.id = "HierarchiesSpriteSheet";
	pluginInfo.name = "HierarchiesSpriteSheet";
	pluginInfo.ext = "hsheet";
	pluginInfo.encoding = "UTF8";
	pluginInfo.capabilities = new Object();
	pluginInfo.capabilities.canRotate = true;
	pluginInfo.capabilities.canTrim = false;
	pluginInfo.capabilities.premultipliedAlpha = false;
	pluginInfo.capabilities.canShapePad = true;
	pluginInfo.capabilities.canBorderPad = true;
	pluginInfo.capabilities.canStackDuplicateFrames = false;
	
	return pluginInfo;
}

function beginExport(meta)
{
	fl.trace("==== begin export ====");
	fl.trace("app:" + meta.app);
	fl.trace("version:" + meta.version);
	fl.trace("image:" + meta.image);
	fl.trace("format:" + meta.format);
	fl.trace("sheetWidth:" + meta.sheetWidth);
	fl.trace("sheetHeight:" + meta.sheetHeight);
	// for (var key in meta) { 
	// 	fl.trace(key + ":" + meta[key]); 
	// }


	var xml = '<?xml version="1.0"?>\n'
		+ '<!-- Generated by ' + meta.app + ' ' + meta.version + ' -->\n'
		+ '<img version="' + FORMAT_VERSION
		+ '" name="' + meta.image 
		+ '" w="' + meta.sheetWidth 
		+ '" h="' + meta.sheetHeight + '">\n'

	return xml;
}

function frameExport(frame)
{
	fl.trace("    ---- frame export");
	fl.trace("   id:" + frame.id);
	fl.trace("   frame.x:" + frame.frame.x);
	fl.trace("   frame.y:" + frame.frame.y);
	fl.trace("   frame.w:" + frame.frame.w);
	fl.trace("   frame.h" + frame.frame.h);
	fl.trace("   offsetInSource.x:" + frame.offsetInSource.x);
	fl.trace("   offsetInSource.y:" + frame.offsetInSource.y);
	fl.trace("   sourceSize.w:" + frame.sourceSize.w);
	fl.trace("   sourceSize.h:" + frame.sourceSize.h);
	fl.trace("   rotated:" + frame.rotated);
	fl.trace("   trimmed:" + frame.trimmed);
	fl.trace("   frameNumber:" + frame.frameNumber);
	fl.trace("   symbolName:" + frame.symbolName);
	// for (var key in frame) { 
	// 	fl.trace(key + ":" + frame[key]); 
	// 	// if (frame[key] instanceof Bitmap) {
	// 	// 	var obj = frame[key];
	// 	// 	for (var k in obj) { 
	// 	// 		fl.trace("--- " + k + ":" + obj[k]); 
	// 	// 	}
	// 	// }
	// }

	var xml =  '    <spr'
		+ ' name="' + frame.frameSource.libraryItem.name + '"'
		+ ' x="' + frame.frame.x + '"' 
		+ ' y="' + frame.frame.y + '"'
		+ ' w="' + frame.frame.w + '"'
		+ ' h="' + frame.frame.h + '"'
		+ ' rot="' + frame.rotated + '"'
		+ ' ></spr>\n';

	return xml;
}

function endExport(meta)
{
	// fl.trace(meta.app);
	// fl.trace(meta.version);
	// fl.trace(meta.image);
	// fl.trace(meta.format);
	// fl.trace(meta.sheetWidth);
	// fl.trace(meta.sheetHeight);
	// for (var key in meta) { 
	// 	fl.trace(key + ":" + meta[key]); 
	// }

	var xml = '</img>\n';

	fl.trace("==== end export ====");

	return xml;
}
